syntax = "proto3";
package bluzelle.curium.nft;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/bluzelle/bluzelle-public/curium/x/nft/types";

message MasterEdition {
  uint64 supply = 1;
  uint64 max_supply = 2;
}

message Metadata {
  uint64 id = 1;
  // The name of the asset
  string name = 2;
  // URI pointing to JSON representing the asset
  string uri = 3;
  // URI pointing to a mutable value, like a url
  string mutable_uri = 4;
  // Royalty basis points that goes to creators in secondary sales (0-10000)
  uint32 seller_fee_basis_points = 5;
  // Immutable, once flipped, all sales of this metadata are considered
  // secondary.
  bool primary_sale_happened = 6;
  // Whether or not the data struct is mutable, default is not
  bool is_mutable = 7;
  // Array of creators, optional
  repeated Creator creators = 8 [ (gogoproto.nullable) = false ];
  // who can update metadata (if is_mutable is true)
  string metadata_authority = 9;
  // who can mint the editions
  string mint_authority = 10;
  MasterEdition master_edition = 11;
}

message Collection {
  uint64 id = 1;
  // The symbol for the asset
  string symbol = 2;

  string name = 3;

  string uri = 4;

  string mutable_uri = 5;
  // Whether or not the data struct is mutable, default is not
  bool is_mutable = 6;
  // who can update metadata (if is_mutable is true)
  string update_authority = 7;
}

message Creator {
  string address = 1;
  bool verified = 2;
  // In percentages, NOT basis points ;) Watch out!
  uint32 share = 3;
}

message NFT {
  uint64 coll_id = 1;

  uint64 metadata_id = 2;

  uint64 seq = 3; // edition nr (0 mean normal nft)

  string owner = 4;
}

// Params defines nft module's parameters
message Params {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_stringer) = false;

  cosmos.base.v1beta1.Coin issue_price = 1 [
    (gogoproto.moretags) = "yaml:\"issue_price\"",
    (gogoproto.nullable) = false
  ];
}

message EventMetadataCreation {
  string creator = 1;
  uint64 metadata_id = 2;
}

message EventNFTCreation {
  string creator = 1;
  string nft_id = 2;
}

message EventPrintEdition {
  string metadata_id = 1;
  uint64 edition = 2;
}

message EventNFTTransfer {
  string nft_id = 1;
  string sender = 2;
  string receiver = 3;
}

message EventMetadataSign {
  string signer = 1;
  uint64 metadata_id = 2;
}

message EventMetadataUpdate {
  string updater = 1;
  uint64 metadata_id = 2;
}

message EventMetadataAuthorityUpdate {
  string metadata_id = 1;
  string new_authority = 2;
}

message EventMintAuthorityUpdate {
  string metadata_id = 1;
  string new_authority = 2;
}

message EventCollectionCreation {
  string creator = 1;
  uint64 collection_id = 2;
}

message EventCollectionVerification {
  string verifier = 1;
  uint64 collection_id = 2;
  string nft_id = 3;
}

message EventCollectionUnverification {
  string verifier = 1;
  uint64 collection_id = 2;
  string nft_id = 3;
}

message EventUpdateCollectionAuthority {
  uint64 collection_id = 1;
  string new_authority = 2;
}

message EventUpdateCollectionUri {
  uint64 collection_id = 1;
  string uri = 2;
}

message EventUpdateCollectionMutableUri {
  uint64 collection_id = 1;
  string uri = 2;
}

message MultiSendNFTOutput {
  string receiver = 1;
  string nft_id =2;
}